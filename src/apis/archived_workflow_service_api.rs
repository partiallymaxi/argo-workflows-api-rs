/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`archived_workflow_service_delete_archived_workflow`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArchivedWorkflowServiceDeleteArchivedWorkflowError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`archived_workflow_service_get_archived_workflow`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArchivedWorkflowServiceGetArchivedWorkflowError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`archived_workflow_service_list_archived_workflow_label_keys`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArchivedWorkflowServiceListArchivedWorkflowLabelKeysError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`archived_workflow_service_list_archived_workflow_label_values`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArchivedWorkflowServiceListArchivedWorkflowLabelValuesError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`archived_workflow_service_list_archived_workflows`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArchivedWorkflowServiceListArchivedWorkflowsError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`archived_workflow_service_resubmit_archived_workflow`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArchivedWorkflowServiceResubmitArchivedWorkflowError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`archived_workflow_service_retry_archived_workflow`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArchivedWorkflowServiceRetryArchivedWorkflowError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}


pub async fn archived_workflow_service_delete_archived_workflow(configuration: &configuration::Configuration, uid: &str, namespace: Option<&str>) -> Result<serde_json::Value, Error<ArchivedWorkflowServiceDeleteArchivedWorkflowError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_uid = uid;
    let p_namespace = namespace;

    let uri_str = format!("{}/api/v1/archived-workflows/{uid}", configuration.base_path, uid=crate::apis::urlencode(p_uid));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = p_namespace {
        req_builder = req_builder.query(&[("namespace", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ArchivedWorkflowServiceDeleteArchivedWorkflowError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn archived_workflow_service_get_archived_workflow(configuration: &configuration::Configuration, uid: &str, namespace: Option<&str>, name: Option<&str>) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow, Error<ArchivedWorkflowServiceGetArchivedWorkflowError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_uid = uid;
    let p_namespace = namespace;
    let p_name = name;

    let uri_str = format!("{}/api/v1/archived-workflows/{uid}", configuration.base_path, uid=crate::apis::urlencode(p_uid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_namespace {
        req_builder = req_builder.query(&[("namespace", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_name {
        req_builder = req_builder.query(&[("name", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ArchivedWorkflowServiceGetArchivedWorkflowError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn archived_workflow_service_list_archived_workflow_label_keys(configuration: &configuration::Configuration, namespace: Option<&str>) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodLabelKeys, Error<ArchivedWorkflowServiceListArchivedWorkflowLabelKeysError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;

    let uri_str = format!("{}/api/v1/archived-workflows-label-keys", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_namespace {
        req_builder = req_builder.query(&[("namespace", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodLabelKeys`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodLabelKeys`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ArchivedWorkflowServiceListArchivedWorkflowLabelKeysError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn archived_workflow_service_list_archived_workflow_label_values(configuration: &configuration::Configuration, list_options_period_label_selector: Option<&str>, list_options_period_field_selector: Option<&str>, list_options_period_watch: Option<bool>, list_options_period_allow_watch_bookmarks: Option<bool>, list_options_period_resource_version: Option<&str>, list_options_period_resource_version_match: Option<&str>, list_options_period_timeout_seconds: Option<&str>, list_options_period_limit: Option<&str>, list_options_period_continue: Option<&str>, list_options_period_send_initial_events: Option<bool>, namespace: Option<&str>) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodLabelValues, Error<ArchivedWorkflowServiceListArchivedWorkflowLabelValuesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_list_options_period_label_selector = list_options_period_label_selector;
    let p_list_options_period_field_selector = list_options_period_field_selector;
    let p_list_options_period_watch = list_options_period_watch;
    let p_list_options_period_allow_watch_bookmarks = list_options_period_allow_watch_bookmarks;
    let p_list_options_period_resource_version = list_options_period_resource_version;
    let p_list_options_period_resource_version_match = list_options_period_resource_version_match;
    let p_list_options_period_timeout_seconds = list_options_period_timeout_seconds;
    let p_list_options_period_limit = list_options_period_limit;
    let p_list_options_period_continue = list_options_period_continue;
    let p_list_options_period_send_initial_events = list_options_period_send_initial_events;
    let p_namespace = namespace;

    let uri_str = format!("{}/api/v1/archived-workflows-label-values", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_list_options_period_label_selector {
        req_builder = req_builder.query(&[("listOptions.labelSelector", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_field_selector {
        req_builder = req_builder.query(&[("listOptions.fieldSelector", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_watch {
        req_builder = req_builder.query(&[("listOptions.watch", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_allow_watch_bookmarks {
        req_builder = req_builder.query(&[("listOptions.allowWatchBookmarks", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_resource_version {
        req_builder = req_builder.query(&[("listOptions.resourceVersion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_resource_version_match {
        req_builder = req_builder.query(&[("listOptions.resourceVersionMatch", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_timeout_seconds {
        req_builder = req_builder.query(&[("listOptions.timeoutSeconds", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_limit {
        req_builder = req_builder.query(&[("listOptions.limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_continue {
        req_builder = req_builder.query(&[("listOptions.continue", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_send_initial_events {
        req_builder = req_builder.query(&[("listOptions.sendInitialEvents", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_namespace {
        req_builder = req_builder.query(&[("namespace", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodLabelValues`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodLabelValues`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ArchivedWorkflowServiceListArchivedWorkflowLabelValuesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn archived_workflow_service_list_archived_workflows(configuration: &configuration::Configuration, list_options_period_label_selector: Option<&str>, list_options_period_field_selector: Option<&str>, list_options_period_watch: Option<bool>, list_options_period_allow_watch_bookmarks: Option<bool>, list_options_period_resource_version: Option<&str>, list_options_period_resource_version_match: Option<&str>, list_options_period_timeout_seconds: Option<&str>, list_options_period_limit: Option<&str>, list_options_period_continue: Option<&str>, list_options_period_send_initial_events: Option<bool>, name_prefix: Option<&str>, namespace: Option<&str>, name_filter: Option<&str>) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowList, Error<ArchivedWorkflowServiceListArchivedWorkflowsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_list_options_period_label_selector = list_options_period_label_selector;
    let p_list_options_period_field_selector = list_options_period_field_selector;
    let p_list_options_period_watch = list_options_period_watch;
    let p_list_options_period_allow_watch_bookmarks = list_options_period_allow_watch_bookmarks;
    let p_list_options_period_resource_version = list_options_period_resource_version;
    let p_list_options_period_resource_version_match = list_options_period_resource_version_match;
    let p_list_options_period_timeout_seconds = list_options_period_timeout_seconds;
    let p_list_options_period_limit = list_options_period_limit;
    let p_list_options_period_continue = list_options_period_continue;
    let p_list_options_period_send_initial_events = list_options_period_send_initial_events;
    let p_name_prefix = name_prefix;
    let p_namespace = namespace;
    let p_name_filter = name_filter;

    let uri_str = format!("{}/api/v1/archived-workflows", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_list_options_period_label_selector {
        req_builder = req_builder.query(&[("listOptions.labelSelector", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_field_selector {
        req_builder = req_builder.query(&[("listOptions.fieldSelector", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_watch {
        req_builder = req_builder.query(&[("listOptions.watch", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_allow_watch_bookmarks {
        req_builder = req_builder.query(&[("listOptions.allowWatchBookmarks", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_resource_version {
        req_builder = req_builder.query(&[("listOptions.resourceVersion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_resource_version_match {
        req_builder = req_builder.query(&[("listOptions.resourceVersionMatch", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_timeout_seconds {
        req_builder = req_builder.query(&[("listOptions.timeoutSeconds", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_limit {
        req_builder = req_builder.query(&[("listOptions.limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_continue {
        req_builder = req_builder.query(&[("listOptions.continue", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_send_initial_events {
        req_builder = req_builder.query(&[("listOptions.sendInitialEvents", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_name_prefix {
        req_builder = req_builder.query(&[("namePrefix", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_namespace {
        req_builder = req_builder.query(&[("namespace", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_name_filter {
        req_builder = req_builder.query(&[("nameFilter", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowList`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowList`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ArchivedWorkflowServiceListArchivedWorkflowsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn archived_workflow_service_resubmit_archived_workflow(configuration: &configuration::Configuration, uid: &str, body: models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodResubmitArchivedWorkflowRequest) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow, Error<ArchivedWorkflowServiceResubmitArchivedWorkflowError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_uid = uid;
    let p_body = body;

    let uri_str = format!("{}/api/v1/archived-workflows/{uid}/resubmit", configuration.base_path, uid=crate::apis::urlencode(p_uid));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ArchivedWorkflowServiceResubmitArchivedWorkflowError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn archived_workflow_service_retry_archived_workflow(configuration: &configuration::Configuration, uid: &str, body: models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodRetryArchivedWorkflowRequest) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow, Error<ArchivedWorkflowServiceRetryArchivedWorkflowError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_uid = uid;
    let p_body = body;

    let uri_str = format!("{}/api/v1/archived-workflows/{uid}/retry", configuration.base_path, uid=crate::apis::urlencode(p_uid));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ArchivedWorkflowServiceRetryArchivedWorkflowError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

