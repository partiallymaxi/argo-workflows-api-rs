/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`artifact_service_get_artifact_file`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArtifactServiceGetArtifactFileError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`artifact_service_get_input_artifact`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArtifactServiceGetInputArtifactError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`artifact_service_get_input_artifact_by_uid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArtifactServiceGetInputArtifactByUidError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`artifact_service_get_output_artifact`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArtifactServiceGetOutputArtifactError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`artifact_service_get_output_artifact_by_uid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArtifactServiceGetOutputArtifactByUidError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}


pub async fn artifact_service_get_artifact_file(configuration: &configuration::Configuration, namespace: &str, id_discriminator: &str, id: &str, node_id: &str, artifact_name: &str, artifact_discriminator: &str) -> Result<reqwest::Response, Error<ArtifactServiceGetArtifactFileError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_id_discriminator = id_discriminator;
    let p_id = id;
    let p_node_id = node_id;
    let p_artifact_name = artifact_name;
    let p_artifact_discriminator = artifact_discriminator;

    let uri_str = format!("{}/artifact-files/{namespace}/{idDiscriminator}/{id}/{nodeId}/{artifactDiscriminator}/{artifactName}", configuration.base_path, namespace=crate::apis::urlencode(p_namespace), idDiscriminator=crate::apis::urlencode(p_id_discriminator), id=crate::apis::urlencode(p_id), nodeId=crate::apis::urlencode(p_node_id), artifactName=crate::apis::urlencode(p_artifact_name), artifactDiscriminator=crate::apis::urlencode(p_artifact_discriminator));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(resp)
    } else {
        let content = resp.text().await?;
        let entity: Option<ArtifactServiceGetArtifactFileError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn artifact_service_get_input_artifact(configuration: &configuration::Configuration, namespace: &str, name: &str, node_id: &str, artifact_name: &str) -> Result<reqwest::Response, Error<ArtifactServiceGetInputArtifactError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_name = name;
    let p_node_id = node_id;
    let p_artifact_name = artifact_name;

    let uri_str = format!("{}/input-artifacts/{namespace}/{name}/{nodeId}/{artifactName}", configuration.base_path, namespace=crate::apis::urlencode(p_namespace), name=crate::apis::urlencode(p_name), nodeId=crate::apis::urlencode(p_node_id), artifactName=crate::apis::urlencode(p_artifact_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(resp)
    } else {
        let content = resp.text().await?;
        let entity: Option<ArtifactServiceGetInputArtifactError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn artifact_service_get_input_artifact_by_uid(configuration: &configuration::Configuration, uid: &str, node_id: &str, artifact_name: &str) -> Result<reqwest::Response, Error<ArtifactServiceGetInputArtifactByUidError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_uid = uid;
    let p_node_id = node_id;
    let p_artifact_name = artifact_name;

    let uri_str = format!("{}/input-artifacts-by-uid/{uid}/{nodeId}/{artifactName}", configuration.base_path, uid=crate::apis::urlencode(p_uid), nodeId=crate::apis::urlencode(p_node_id), artifactName=crate::apis::urlencode(p_artifact_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(resp)
    } else {
        let content = resp.text().await?;
        let entity: Option<ArtifactServiceGetInputArtifactByUidError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn artifact_service_get_output_artifact(configuration: &configuration::Configuration, namespace: &str, name: &str, node_id: &str, artifact_name: &str) -> Result<reqwest::Response, Error<ArtifactServiceGetOutputArtifactError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_name = name;
    let p_node_id = node_id;
    let p_artifact_name = artifact_name;

    let uri_str = format!("{}/artifacts/{namespace}/{name}/{nodeId}/{artifactName}", configuration.base_path, namespace=crate::apis::urlencode(p_namespace), name=crate::apis::urlencode(p_name), nodeId=crate::apis::urlencode(p_node_id), artifactName=crate::apis::urlencode(p_artifact_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(resp)
    } else {
        let content = resp.text().await?;
        let entity: Option<ArtifactServiceGetOutputArtifactError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn artifact_service_get_output_artifact_by_uid(configuration: &configuration::Configuration, uid: &str, node_id: &str, artifact_name: &str) -> Result<reqwest::Response, Error<ArtifactServiceGetOutputArtifactByUidError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_uid = uid;
    let p_node_id = node_id;
    let p_artifact_name = artifact_name;

    let uri_str = format!("{}/artifacts-by-uid/{uid}/{nodeId}/{artifactName}", configuration.base_path, uid=crate::apis::urlencode(p_uid), nodeId=crate::apis::urlencode(p_node_id), artifactName=crate::apis::urlencode(p_artifact_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(resp)
    } else {
        let content = resp.text().await?;
        let entity: Option<ArtifactServiceGetOutputArtifactByUidError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

