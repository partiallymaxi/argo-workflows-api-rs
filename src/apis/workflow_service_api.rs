/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`workflow_service_create_workflow`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowServiceCreateWorkflowError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_service_delete_workflow`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowServiceDeleteWorkflowError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_service_get_workflow`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowServiceGetWorkflowError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_service_lint_workflow`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowServiceLintWorkflowError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_service_list_workflows`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowServiceListWorkflowsError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_service_pod_logs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowServicePodLogsError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_service_resubmit_workflow`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowServiceResubmitWorkflowError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_service_resume_workflow`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowServiceResumeWorkflowError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_service_retry_workflow`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowServiceRetryWorkflowError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_service_set_workflow`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowServiceSetWorkflowError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_service_stop_workflow`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowServiceStopWorkflowError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_service_submit_workflow`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowServiceSubmitWorkflowError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_service_suspend_workflow`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowServiceSuspendWorkflowError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_service_terminate_workflow`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowServiceTerminateWorkflowError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_service_watch_events`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowServiceWatchEventsError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_service_watch_workflows`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowServiceWatchWorkflowsError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_service_workflow_logs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowServiceWorkflowLogsError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}


pub async fn workflow_service_create_workflow(configuration: &configuration::Configuration, namespace: &str, body: models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowCreateRequest) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow, Error<WorkflowServiceCreateWorkflowError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_body = body;

    let uri_str = format!("{}/api/v1/workflows/{namespace}", configuration.base_path, namespace=crate::apis::urlencode(p_namespace));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowServiceCreateWorkflowError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn workflow_service_delete_workflow(configuration: &configuration::Configuration, namespace: &str, name: &str, delete_options_period_grace_period_seconds: Option<&str>, delete_options_period_preconditions_period_uid: Option<&str>, delete_options_period_preconditions_period_resource_version: Option<&str>, delete_options_period_orphan_dependents: Option<bool>, delete_options_period_propagation_policy: Option<&str>, delete_options_period_dry_run: Option<Vec<String>>, delete_options_period_ignore_store_read_error_with_cluster_breaking_potential: Option<bool>, force: Option<bool>) -> Result<serde_json::Value, Error<WorkflowServiceDeleteWorkflowError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_name = name;
    let p_delete_options_period_grace_period_seconds = delete_options_period_grace_period_seconds;
    let p_delete_options_period_preconditions_period_uid = delete_options_period_preconditions_period_uid;
    let p_delete_options_period_preconditions_period_resource_version = delete_options_period_preconditions_period_resource_version;
    let p_delete_options_period_orphan_dependents = delete_options_period_orphan_dependents;
    let p_delete_options_period_propagation_policy = delete_options_period_propagation_policy;
    let p_delete_options_period_dry_run = delete_options_period_dry_run;
    let p_delete_options_period_ignore_store_read_error_with_cluster_breaking_potential = delete_options_period_ignore_store_read_error_with_cluster_breaking_potential;
    let p_force = force;

    let uri_str = format!("{}/api/v1/workflows/{namespace}/{name}", configuration.base_path, namespace=crate::apis::urlencode(p_namespace), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = p_delete_options_period_grace_period_seconds {
        req_builder = req_builder.query(&[("deleteOptions.gracePeriodSeconds", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_delete_options_period_preconditions_period_uid {
        req_builder = req_builder.query(&[("deleteOptions.preconditions.uid", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_delete_options_period_preconditions_period_resource_version {
        req_builder = req_builder.query(&[("deleteOptions.preconditions.resourceVersion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_delete_options_period_orphan_dependents {
        req_builder = req_builder.query(&[("deleteOptions.orphanDependents", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_delete_options_period_propagation_policy {
        req_builder = req_builder.query(&[("deleteOptions.propagationPolicy", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_delete_options_period_dry_run {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("deleteOptions.dryRun".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("deleteOptions.dryRun", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_delete_options_period_ignore_store_read_error_with_cluster_breaking_potential {
        req_builder = req_builder.query(&[("deleteOptions.ignoreStoreReadErrorWithClusterBreakingPotential", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_force {
        req_builder = req_builder.query(&[("force", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowServiceDeleteWorkflowError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn workflow_service_get_workflow(configuration: &configuration::Configuration, namespace: &str, name: &str, get_options_period_resource_version: Option<&str>, fields: Option<&str>) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow, Error<WorkflowServiceGetWorkflowError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_name = name;
    let p_get_options_period_resource_version = get_options_period_resource_version;
    let p_fields = fields;

    let uri_str = format!("{}/api/v1/workflows/{namespace}/{name}", configuration.base_path, namespace=crate::apis::urlencode(p_namespace), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_get_options_period_resource_version {
        req_builder = req_builder.query(&[("getOptions.resourceVersion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_fields {
        req_builder = req_builder.query(&[("fields", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowServiceGetWorkflowError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn workflow_service_lint_workflow(configuration: &configuration::Configuration, namespace: &str, body: models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowLintRequest) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow, Error<WorkflowServiceLintWorkflowError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_body = body;

    let uri_str = format!("{}/api/v1/workflows/{namespace}/lint", configuration.base_path, namespace=crate::apis::urlencode(p_namespace));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowServiceLintWorkflowError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn workflow_service_list_workflows(configuration: &configuration::Configuration, namespace: &str, list_options_period_label_selector: Option<&str>, list_options_period_field_selector: Option<&str>, list_options_period_watch: Option<bool>, list_options_period_allow_watch_bookmarks: Option<bool>, list_options_period_resource_version: Option<&str>, list_options_period_resource_version_match: Option<&str>, list_options_period_timeout_seconds: Option<&str>, list_options_period_limit: Option<&str>, list_options_period_continue: Option<&str>, list_options_period_send_initial_events: Option<bool>, fields: Option<&str>, name_filter: Option<&str>, created_after: Option<&str>, finished_before: Option<&str>) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowList, Error<WorkflowServiceListWorkflowsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_list_options_period_label_selector = list_options_period_label_selector;
    let p_list_options_period_field_selector = list_options_period_field_selector;
    let p_list_options_period_watch = list_options_period_watch;
    let p_list_options_period_allow_watch_bookmarks = list_options_period_allow_watch_bookmarks;
    let p_list_options_period_resource_version = list_options_period_resource_version;
    let p_list_options_period_resource_version_match = list_options_period_resource_version_match;
    let p_list_options_period_timeout_seconds = list_options_period_timeout_seconds;
    let p_list_options_period_limit = list_options_period_limit;
    let p_list_options_period_continue = list_options_period_continue;
    let p_list_options_period_send_initial_events = list_options_period_send_initial_events;
    let p_fields = fields;
    let p_name_filter = name_filter;
    let p_created_after = created_after;
    let p_finished_before = finished_before;

    let uri_str = format!("{}/api/v1/workflows/{namespace}", configuration.base_path, namespace=crate::apis::urlencode(p_namespace));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_list_options_period_label_selector {
        req_builder = req_builder.query(&[("listOptions.labelSelector", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_field_selector {
        req_builder = req_builder.query(&[("listOptions.fieldSelector", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_watch {
        req_builder = req_builder.query(&[("listOptions.watch", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_allow_watch_bookmarks {
        req_builder = req_builder.query(&[("listOptions.allowWatchBookmarks", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_resource_version {
        req_builder = req_builder.query(&[("listOptions.resourceVersion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_resource_version_match {
        req_builder = req_builder.query(&[("listOptions.resourceVersionMatch", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_timeout_seconds {
        req_builder = req_builder.query(&[("listOptions.timeoutSeconds", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_limit {
        req_builder = req_builder.query(&[("listOptions.limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_continue {
        req_builder = req_builder.query(&[("listOptions.continue", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_send_initial_events {
        req_builder = req_builder.query(&[("listOptions.sendInitialEvents", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_fields {
        req_builder = req_builder.query(&[("fields", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_name_filter {
        req_builder = req_builder.query(&[("nameFilter", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_created_after {
        req_builder = req_builder.query(&[("createdAfter", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_finished_before {
        req_builder = req_builder.query(&[("finishedBefore", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowList`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowList`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowServiceListWorkflowsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn workflow_service_pod_logs(configuration: &configuration::Configuration, namespace: &str, name: &str, pod_name: &str, log_options_period_container: Option<&str>, log_options_period_follow: Option<bool>, log_options_period_previous: Option<bool>, log_options_period_since_seconds: Option<&str>, log_options_period_since_time_period_seconds: Option<&str>, log_options_period_since_time_period_nanos: Option<i32>, log_options_period_timestamps: Option<bool>, log_options_period_tail_lines: Option<&str>, log_options_period_limit_bytes: Option<&str>, log_options_period_insecure_skip_tls_verify_backend: Option<bool>, log_options_period_stream: Option<&str>, grep: Option<&str>, selector: Option<&str>) -> Result<models::StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry, Error<WorkflowServicePodLogsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_name = name;
    let p_pod_name = pod_name;
    let p_log_options_period_container = log_options_period_container;
    let p_log_options_period_follow = log_options_period_follow;
    let p_log_options_period_previous = log_options_period_previous;
    let p_log_options_period_since_seconds = log_options_period_since_seconds;
    let p_log_options_period_since_time_period_seconds = log_options_period_since_time_period_seconds;
    let p_log_options_period_since_time_period_nanos = log_options_period_since_time_period_nanos;
    let p_log_options_period_timestamps = log_options_period_timestamps;
    let p_log_options_period_tail_lines = log_options_period_tail_lines;
    let p_log_options_period_limit_bytes = log_options_period_limit_bytes;
    let p_log_options_period_insecure_skip_tls_verify_backend = log_options_period_insecure_skip_tls_verify_backend;
    let p_log_options_period_stream = log_options_period_stream;
    let p_grep = grep;
    let p_selector = selector;

    let uri_str = format!("{}/api/v1/workflows/{namespace}/{name}/{podName}/log", configuration.base_path, namespace=crate::apis::urlencode(p_namespace), name=crate::apis::urlencode(p_name), podName=crate::apis::urlencode(p_pod_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_log_options_period_container {
        req_builder = req_builder.query(&[("logOptions.container", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_log_options_period_follow {
        req_builder = req_builder.query(&[("logOptions.follow", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_log_options_period_previous {
        req_builder = req_builder.query(&[("logOptions.previous", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_log_options_period_since_seconds {
        req_builder = req_builder.query(&[("logOptions.sinceSeconds", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_log_options_period_since_time_period_seconds {
        req_builder = req_builder.query(&[("logOptions.sinceTime.seconds", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_log_options_period_since_time_period_nanos {
        req_builder = req_builder.query(&[("logOptions.sinceTime.nanos", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_log_options_period_timestamps {
        req_builder = req_builder.query(&[("logOptions.timestamps", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_log_options_period_tail_lines {
        req_builder = req_builder.query(&[("logOptions.tailLines", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_log_options_period_limit_bytes {
        req_builder = req_builder.query(&[("logOptions.limitBytes", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_log_options_period_insecure_skip_tls_verify_backend {
        req_builder = req_builder.query(&[("logOptions.insecureSkipTLSVerifyBackend", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_log_options_period_stream {
        req_builder = req_builder.query(&[("logOptions.stream", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_grep {
        req_builder = req_builder.query(&[("grep", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_selector {
        req_builder = req_builder.query(&[("selector", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowServicePodLogsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn workflow_service_resubmit_workflow(configuration: &configuration::Configuration, namespace: &str, name: &str, body: models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowResubmitRequest) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow, Error<WorkflowServiceResubmitWorkflowError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_name = name;
    let p_body = body;

    let uri_str = format!("{}/api/v1/workflows/{namespace}/{name}/resubmit", configuration.base_path, namespace=crate::apis::urlencode(p_namespace), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowServiceResubmitWorkflowError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn workflow_service_resume_workflow(configuration: &configuration::Configuration, namespace: &str, name: &str, body: models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowResumeRequest) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow, Error<WorkflowServiceResumeWorkflowError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_name = name;
    let p_body = body;

    let uri_str = format!("{}/api/v1/workflows/{namespace}/{name}/resume", configuration.base_path, namespace=crate::apis::urlencode(p_namespace), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowServiceResumeWorkflowError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn workflow_service_retry_workflow(configuration: &configuration::Configuration, namespace: &str, name: &str, body: models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowRetryRequest) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow, Error<WorkflowServiceRetryWorkflowError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_name = name;
    let p_body = body;

    let uri_str = format!("{}/api/v1/workflows/{namespace}/{name}/retry", configuration.base_path, namespace=crate::apis::urlencode(p_namespace), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowServiceRetryWorkflowError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn workflow_service_set_workflow(configuration: &configuration::Configuration, namespace: &str, name: &str, body: models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowSetRequest) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow, Error<WorkflowServiceSetWorkflowError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_name = name;
    let p_body = body;

    let uri_str = format!("{}/api/v1/workflows/{namespace}/{name}/set", configuration.base_path, namespace=crate::apis::urlencode(p_namespace), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowServiceSetWorkflowError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn workflow_service_stop_workflow(configuration: &configuration::Configuration, namespace: &str, name: &str, body: models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowStopRequest) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow, Error<WorkflowServiceStopWorkflowError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_name = name;
    let p_body = body;

    let uri_str = format!("{}/api/v1/workflows/{namespace}/{name}/stop", configuration.base_path, namespace=crate::apis::urlencode(p_namespace), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowServiceStopWorkflowError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn workflow_service_submit_workflow(configuration: &configuration::Configuration, namespace: &str, body: models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowSubmitRequest) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow, Error<WorkflowServiceSubmitWorkflowError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_body = body;

    let uri_str = format!("{}/api/v1/workflows/{namespace}/submit", configuration.base_path, namespace=crate::apis::urlencode(p_namespace));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowServiceSubmitWorkflowError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn workflow_service_suspend_workflow(configuration: &configuration::Configuration, namespace: &str, name: &str, body: models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowSuspendRequest) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow, Error<WorkflowServiceSuspendWorkflowError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_name = name;
    let p_body = body;

    let uri_str = format!("{}/api/v1/workflows/{namespace}/{name}/suspend", configuration.base_path, namespace=crate::apis::urlencode(p_namespace), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowServiceSuspendWorkflowError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn workflow_service_terminate_workflow(configuration: &configuration::Configuration, namespace: &str, name: &str, body: models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowTerminateRequest) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow, Error<WorkflowServiceTerminateWorkflowError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_name = name;
    let p_body = body;

    let uri_str = format!("{}/api/v1/workflows/{namespace}/{name}/terminate", configuration.base_path, namespace=crate::apis::urlencode(p_namespace), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflow`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowServiceTerminateWorkflowError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn workflow_service_watch_events(configuration: &configuration::Configuration, namespace: &str, list_options_period_label_selector: Option<&str>, list_options_period_field_selector: Option<&str>, list_options_period_watch: Option<bool>, list_options_period_allow_watch_bookmarks: Option<bool>, list_options_period_resource_version: Option<&str>, list_options_period_resource_version_match: Option<&str>, list_options_period_timeout_seconds: Option<&str>, list_options_period_limit: Option<&str>, list_options_period_continue: Option<&str>, list_options_period_send_initial_events: Option<bool>) -> Result<models::StreamResultOfIoK8sApiCoreV1Event, Error<WorkflowServiceWatchEventsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_list_options_period_label_selector = list_options_period_label_selector;
    let p_list_options_period_field_selector = list_options_period_field_selector;
    let p_list_options_period_watch = list_options_period_watch;
    let p_list_options_period_allow_watch_bookmarks = list_options_period_allow_watch_bookmarks;
    let p_list_options_period_resource_version = list_options_period_resource_version;
    let p_list_options_period_resource_version_match = list_options_period_resource_version_match;
    let p_list_options_period_timeout_seconds = list_options_period_timeout_seconds;
    let p_list_options_period_limit = list_options_period_limit;
    let p_list_options_period_continue = list_options_period_continue;
    let p_list_options_period_send_initial_events = list_options_period_send_initial_events;

    let uri_str = format!("{}/api/v1/stream/events/{namespace}", configuration.base_path, namespace=crate::apis::urlencode(p_namespace));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_list_options_period_label_selector {
        req_builder = req_builder.query(&[("listOptions.labelSelector", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_field_selector {
        req_builder = req_builder.query(&[("listOptions.fieldSelector", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_watch {
        req_builder = req_builder.query(&[("listOptions.watch", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_allow_watch_bookmarks {
        req_builder = req_builder.query(&[("listOptions.allowWatchBookmarks", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_resource_version {
        req_builder = req_builder.query(&[("listOptions.resourceVersion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_resource_version_match {
        req_builder = req_builder.query(&[("listOptions.resourceVersionMatch", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_timeout_seconds {
        req_builder = req_builder.query(&[("listOptions.timeoutSeconds", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_limit {
        req_builder = req_builder.query(&[("listOptions.limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_continue {
        req_builder = req_builder.query(&[("listOptions.continue", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_send_initial_events {
        req_builder = req_builder.query(&[("listOptions.sendInitialEvents", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StreamResultOfIoK8sApiCoreV1Event`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StreamResultOfIoK8sApiCoreV1Event`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowServiceWatchEventsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn workflow_service_watch_workflows(configuration: &configuration::Configuration, namespace: &str, list_options_period_label_selector: Option<&str>, list_options_period_field_selector: Option<&str>, list_options_period_watch: Option<bool>, list_options_period_allow_watch_bookmarks: Option<bool>, list_options_period_resource_version: Option<&str>, list_options_period_resource_version_match: Option<&str>, list_options_period_timeout_seconds: Option<&str>, list_options_period_limit: Option<&str>, list_options_period_continue: Option<&str>, list_options_period_send_initial_events: Option<bool>, fields: Option<&str>) -> Result<models::StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent, Error<WorkflowServiceWatchWorkflowsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_list_options_period_label_selector = list_options_period_label_selector;
    let p_list_options_period_field_selector = list_options_period_field_selector;
    let p_list_options_period_watch = list_options_period_watch;
    let p_list_options_period_allow_watch_bookmarks = list_options_period_allow_watch_bookmarks;
    let p_list_options_period_resource_version = list_options_period_resource_version;
    let p_list_options_period_resource_version_match = list_options_period_resource_version_match;
    let p_list_options_period_timeout_seconds = list_options_period_timeout_seconds;
    let p_list_options_period_limit = list_options_period_limit;
    let p_list_options_period_continue = list_options_period_continue;
    let p_list_options_period_send_initial_events = list_options_period_send_initial_events;
    let p_fields = fields;

    let uri_str = format!("{}/api/v1/workflow-events/{namespace}", configuration.base_path, namespace=crate::apis::urlencode(p_namespace));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_list_options_period_label_selector {
        req_builder = req_builder.query(&[("listOptions.labelSelector", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_field_selector {
        req_builder = req_builder.query(&[("listOptions.fieldSelector", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_watch {
        req_builder = req_builder.query(&[("listOptions.watch", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_allow_watch_bookmarks {
        req_builder = req_builder.query(&[("listOptions.allowWatchBookmarks", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_resource_version {
        req_builder = req_builder.query(&[("listOptions.resourceVersion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_resource_version_match {
        req_builder = req_builder.query(&[("listOptions.resourceVersionMatch", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_timeout_seconds {
        req_builder = req_builder.query(&[("listOptions.timeoutSeconds", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_limit {
        req_builder = req_builder.query(&[("listOptions.limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_continue {
        req_builder = req_builder.query(&[("listOptions.continue", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_send_initial_events {
        req_builder = req_builder.query(&[("listOptions.sendInitialEvents", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_fields {
        req_builder = req_builder.query(&[("fields", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowServiceWatchWorkflowsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn workflow_service_workflow_logs(configuration: &configuration::Configuration, namespace: &str, name: &str, pod_name: Option<&str>, log_options_period_container: Option<&str>, log_options_period_follow: Option<bool>, log_options_period_previous: Option<bool>, log_options_period_since_seconds: Option<&str>, log_options_period_since_time_period_seconds: Option<&str>, log_options_period_since_time_period_nanos: Option<i32>, log_options_period_timestamps: Option<bool>, log_options_period_tail_lines: Option<&str>, log_options_period_limit_bytes: Option<&str>, log_options_period_insecure_skip_tls_verify_backend: Option<bool>, log_options_period_stream: Option<&str>, grep: Option<&str>, selector: Option<&str>) -> Result<models::StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry, Error<WorkflowServiceWorkflowLogsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_name = name;
    let p_pod_name = pod_name;
    let p_log_options_period_container = log_options_period_container;
    let p_log_options_period_follow = log_options_period_follow;
    let p_log_options_period_previous = log_options_period_previous;
    let p_log_options_period_since_seconds = log_options_period_since_seconds;
    let p_log_options_period_since_time_period_seconds = log_options_period_since_time_period_seconds;
    let p_log_options_period_since_time_period_nanos = log_options_period_since_time_period_nanos;
    let p_log_options_period_timestamps = log_options_period_timestamps;
    let p_log_options_period_tail_lines = log_options_period_tail_lines;
    let p_log_options_period_limit_bytes = log_options_period_limit_bytes;
    let p_log_options_period_insecure_skip_tls_verify_backend = log_options_period_insecure_skip_tls_verify_backend;
    let p_log_options_period_stream = log_options_period_stream;
    let p_grep = grep;
    let p_selector = selector;

    let uri_str = format!("{}/api/v1/workflows/{namespace}/{name}/log", configuration.base_path, namespace=crate::apis::urlencode(p_namespace), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_pod_name {
        req_builder = req_builder.query(&[("podName", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_log_options_period_container {
        req_builder = req_builder.query(&[("logOptions.container", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_log_options_period_follow {
        req_builder = req_builder.query(&[("logOptions.follow", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_log_options_period_previous {
        req_builder = req_builder.query(&[("logOptions.previous", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_log_options_period_since_seconds {
        req_builder = req_builder.query(&[("logOptions.sinceSeconds", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_log_options_period_since_time_period_seconds {
        req_builder = req_builder.query(&[("logOptions.sinceTime.seconds", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_log_options_period_since_time_period_nanos {
        req_builder = req_builder.query(&[("logOptions.sinceTime.nanos", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_log_options_period_timestamps {
        req_builder = req_builder.query(&[("logOptions.timestamps", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_log_options_period_tail_lines {
        req_builder = req_builder.query(&[("logOptions.tailLines", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_log_options_period_limit_bytes {
        req_builder = req_builder.query(&[("logOptions.limitBytes", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_log_options_period_insecure_skip_tls_verify_backend {
        req_builder = req_builder.query(&[("logOptions.insecureSkipTLSVerifyBackend", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_log_options_period_stream {
        req_builder = req_builder.query(&[("logOptions.stream", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_grep {
        req_builder = req_builder.query(&[("grep", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_selector {
        req_builder = req_builder.query(&[("selector", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowServiceWorkflowLogsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

