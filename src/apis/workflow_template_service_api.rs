/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`workflow_template_service_create_workflow_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowTemplateServiceCreateWorkflowTemplateError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_template_service_delete_workflow_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowTemplateServiceDeleteWorkflowTemplateError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_template_service_get_workflow_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowTemplateServiceGetWorkflowTemplateError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_template_service_lint_workflow_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowTemplateServiceLintWorkflowTemplateError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_template_service_list_workflow_templates`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowTemplateServiceListWorkflowTemplatesError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`workflow_template_service_update_workflow_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowTemplateServiceUpdateWorkflowTemplateError {
    DefaultResponse(models::GrpcPeriodGatewayPeriodRuntimePeriodError),
    UnknownValue(serde_json::Value),
}


pub async fn workflow_template_service_create_workflow_template(configuration: &configuration::Configuration, namespace: &str, body: models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowTemplateCreateRequest) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowTemplate, Error<WorkflowTemplateServiceCreateWorkflowTemplateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_body = body;

    let uri_str = format!("{}/api/v1/workflow-templates/{namespace}", configuration.base_path, namespace=crate::apis::urlencode(p_namespace));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowTemplate`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowTemplate`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowTemplateServiceCreateWorkflowTemplateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn workflow_template_service_delete_workflow_template(configuration: &configuration::Configuration, namespace: &str, name: &str, delete_options_period_grace_period_seconds: Option<&str>, delete_options_period_preconditions_period_uid: Option<&str>, delete_options_period_preconditions_period_resource_version: Option<&str>, delete_options_period_orphan_dependents: Option<bool>, delete_options_period_propagation_policy: Option<&str>, delete_options_period_dry_run: Option<Vec<String>>, delete_options_period_ignore_store_read_error_with_cluster_breaking_potential: Option<bool>) -> Result<serde_json::Value, Error<WorkflowTemplateServiceDeleteWorkflowTemplateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_name = name;
    let p_delete_options_period_grace_period_seconds = delete_options_period_grace_period_seconds;
    let p_delete_options_period_preconditions_period_uid = delete_options_period_preconditions_period_uid;
    let p_delete_options_period_preconditions_period_resource_version = delete_options_period_preconditions_period_resource_version;
    let p_delete_options_period_orphan_dependents = delete_options_period_orphan_dependents;
    let p_delete_options_period_propagation_policy = delete_options_period_propagation_policy;
    let p_delete_options_period_dry_run = delete_options_period_dry_run;
    let p_delete_options_period_ignore_store_read_error_with_cluster_breaking_potential = delete_options_period_ignore_store_read_error_with_cluster_breaking_potential;

    let uri_str = format!("{}/api/v1/workflow-templates/{namespace}/{name}", configuration.base_path, namespace=crate::apis::urlencode(p_namespace), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = p_delete_options_period_grace_period_seconds {
        req_builder = req_builder.query(&[("deleteOptions.gracePeriodSeconds", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_delete_options_period_preconditions_period_uid {
        req_builder = req_builder.query(&[("deleteOptions.preconditions.uid", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_delete_options_period_preconditions_period_resource_version {
        req_builder = req_builder.query(&[("deleteOptions.preconditions.resourceVersion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_delete_options_period_orphan_dependents {
        req_builder = req_builder.query(&[("deleteOptions.orphanDependents", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_delete_options_period_propagation_policy {
        req_builder = req_builder.query(&[("deleteOptions.propagationPolicy", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_delete_options_period_dry_run {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("deleteOptions.dryRun".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("deleteOptions.dryRun", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_delete_options_period_ignore_store_read_error_with_cluster_breaking_potential {
        req_builder = req_builder.query(&[("deleteOptions.ignoreStoreReadErrorWithClusterBreakingPotential", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowTemplateServiceDeleteWorkflowTemplateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn workflow_template_service_get_workflow_template(configuration: &configuration::Configuration, namespace: &str, name: &str, get_options_period_resource_version: Option<&str>) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowTemplate, Error<WorkflowTemplateServiceGetWorkflowTemplateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_name = name;
    let p_get_options_period_resource_version = get_options_period_resource_version;

    let uri_str = format!("{}/api/v1/workflow-templates/{namespace}/{name}", configuration.base_path, namespace=crate::apis::urlencode(p_namespace), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_get_options_period_resource_version {
        req_builder = req_builder.query(&[("getOptions.resourceVersion", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowTemplate`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowTemplate`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowTemplateServiceGetWorkflowTemplateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn workflow_template_service_lint_workflow_template(configuration: &configuration::Configuration, namespace: &str, body: models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowTemplateLintRequest) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowTemplate, Error<WorkflowTemplateServiceLintWorkflowTemplateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_body = body;

    let uri_str = format!("{}/api/v1/workflow-templates/{namespace}/lint", configuration.base_path, namespace=crate::apis::urlencode(p_namespace));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowTemplate`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowTemplate`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowTemplateServiceLintWorkflowTemplateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn workflow_template_service_list_workflow_templates(configuration: &configuration::Configuration, namespace: &str, name_pattern: Option<&str>, list_options_period_label_selector: Option<&str>, list_options_period_field_selector: Option<&str>, list_options_period_watch: Option<bool>, list_options_period_allow_watch_bookmarks: Option<bool>, list_options_period_resource_version: Option<&str>, list_options_period_resource_version_match: Option<&str>, list_options_period_timeout_seconds: Option<&str>, list_options_period_limit: Option<&str>, list_options_period_continue: Option<&str>, list_options_period_send_initial_events: Option<bool>) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowTemplateList, Error<WorkflowTemplateServiceListWorkflowTemplatesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_name_pattern = name_pattern;
    let p_list_options_period_label_selector = list_options_period_label_selector;
    let p_list_options_period_field_selector = list_options_period_field_selector;
    let p_list_options_period_watch = list_options_period_watch;
    let p_list_options_period_allow_watch_bookmarks = list_options_period_allow_watch_bookmarks;
    let p_list_options_period_resource_version = list_options_period_resource_version;
    let p_list_options_period_resource_version_match = list_options_period_resource_version_match;
    let p_list_options_period_timeout_seconds = list_options_period_timeout_seconds;
    let p_list_options_period_limit = list_options_period_limit;
    let p_list_options_period_continue = list_options_period_continue;
    let p_list_options_period_send_initial_events = list_options_period_send_initial_events;

    let uri_str = format!("{}/api/v1/workflow-templates/{namespace}", configuration.base_path, namespace=crate::apis::urlencode(p_namespace));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_name_pattern {
        req_builder = req_builder.query(&[("namePattern", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_label_selector {
        req_builder = req_builder.query(&[("listOptions.labelSelector", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_field_selector {
        req_builder = req_builder.query(&[("listOptions.fieldSelector", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_watch {
        req_builder = req_builder.query(&[("listOptions.watch", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_allow_watch_bookmarks {
        req_builder = req_builder.query(&[("listOptions.allowWatchBookmarks", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_resource_version {
        req_builder = req_builder.query(&[("listOptions.resourceVersion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_resource_version_match {
        req_builder = req_builder.query(&[("listOptions.resourceVersionMatch", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_timeout_seconds {
        req_builder = req_builder.query(&[("listOptions.timeoutSeconds", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_limit {
        req_builder = req_builder.query(&[("listOptions.limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_continue {
        req_builder = req_builder.query(&[("listOptions.continue", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_list_options_period_send_initial_events {
        req_builder = req_builder.query(&[("listOptions.sendInitialEvents", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowTemplateList`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowTemplateList`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowTemplateServiceListWorkflowTemplatesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn workflow_template_service_update_workflow_template(configuration: &configuration::Configuration, namespace: &str, name: &str, body: models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowTemplateUpdateRequest) -> Result<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowTemplate, Error<WorkflowTemplateServiceUpdateWorkflowTemplateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_namespace = namespace;
    let p_name = name;
    let p_body = body;

    let uri_str = format!("{}/api/v1/workflow-templates/{namespace}/{name}", configuration.base_path, namespace=crate::apis::urlencode(p_namespace), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowTemplate`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodWorkflowTemplate`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<WorkflowTemplateServiceUpdateWorkflowTemplateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

