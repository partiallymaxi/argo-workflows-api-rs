/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GithubComArgoprojArgoEventsPkgApisEventsV1alpha1CalendarEventSource {
    /// ExclusionDates defines the list of DATE-TIME exceptions for recurring events.
    #[serde(rename = "exclusionDates", skip_serializing_if = "Option::is_none")]
    pub exclusion_dates: Option<Vec<String>>,
    #[serde(rename = "filter", skip_serializing_if = "Option::is_none")]
    pub filter: Option<Box<models::GithubComArgoprojArgoEventsPkgApisEventsV1alpha1EventSourceFilter>>,
    #[serde(rename = "interval", skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "persistence", skip_serializing_if = "Option::is_none")]
    pub persistence: Option<Box<models::GithubComArgoprojArgoEventsPkgApisEventsV1alpha1EventPersistence>>,
    #[serde(rename = "schedule", skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
    #[serde(rename = "timezone", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
}

impl GithubComArgoprojArgoEventsPkgApisEventsV1alpha1CalendarEventSource {
    pub fn new() -> GithubComArgoprojArgoEventsPkgApisEventsV1alpha1CalendarEventSource {
        GithubComArgoprojArgoEventsPkgApisEventsV1alpha1CalendarEventSource {
            exclusion_dates: None,
            filter: None,
            interval: None,
            metadata: None,
            persistence: None,
            schedule: None,
            timezone: None,
        }
    }
}

