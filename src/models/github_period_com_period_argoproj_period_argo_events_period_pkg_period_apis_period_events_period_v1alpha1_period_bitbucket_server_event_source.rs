/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GithubPeriodComPeriodArgoprojPeriodArgoEventsPeriodPkgPeriodApisPeriodEventsPeriodV1alpha1PeriodBitbucketServerEventSource {
    #[serde(rename = "accessToken", skip_serializing_if = "Option::is_none")]
    pub access_token: Option<Box<models::IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodSecretKeySelector>>,
    /// BitbucketServerBaseURL is the base URL for API requests to a custom endpoint.
    #[serde(rename = "bitbucketserverBaseURL", skip_serializing_if = "Option::is_none")]
    pub bitbucketserver_base_url: Option<String>,
    #[serde(rename = "checkInterval", skip_serializing_if = "Option::is_none")]
    pub check_interval: Option<String>,
    #[serde(rename = "deleteHookOnFinish", skip_serializing_if = "Option::is_none")]
    pub delete_hook_on_finish: Option<bool>,
    #[serde(rename = "events", skip_serializing_if = "Option::is_none")]
    pub events: Option<Vec<String>>,
    #[serde(rename = "filter", skip_serializing_if = "Option::is_none")]
    pub filter: Option<Box<models::GithubPeriodComPeriodArgoprojPeriodArgoEventsPeriodPkgPeriodApisPeriodEventsPeriodV1alpha1PeriodEventSourceFilter>>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "oneEventPerChange", skip_serializing_if = "Option::is_none")]
    pub one_event_per_change: Option<bool>,
    #[serde(rename = "projectKey", skip_serializing_if = "Option::is_none")]
    pub project_key: Option<String>,
    #[serde(rename = "projects", skip_serializing_if = "Option::is_none")]
    pub projects: Option<Vec<String>>,
    #[serde(rename = "repositories", skip_serializing_if = "Option::is_none")]
    pub repositories: Option<Vec<models::GithubPeriodComPeriodArgoprojPeriodArgoEventsPeriodPkgPeriodApisPeriodEventsPeriodV1alpha1PeriodBitbucketServerRepository>>,
    #[serde(rename = "repositorySlug", skip_serializing_if = "Option::is_none")]
    pub repository_slug: Option<String>,
    #[serde(rename = "skipBranchRefsChangedOnOpenPR", skip_serializing_if = "Option::is_none")]
    pub skip_branch_refs_changed_on_open_pr: Option<bool>,
    #[serde(rename = "tls", skip_serializing_if = "Option::is_none")]
    pub tls: Option<Box<models::GithubPeriodComPeriodArgoprojPeriodArgoEventsPeriodPkgPeriodApisPeriodEventsPeriodV1alpha1PeriodTlsConfig>>,
    #[serde(rename = "webhook", skip_serializing_if = "Option::is_none")]
    pub webhook: Option<Box<models::GithubPeriodComPeriodArgoprojPeriodArgoEventsPeriodPkgPeriodApisPeriodEventsPeriodV1alpha1PeriodWebhookContext>>,
    #[serde(rename = "webhookSecret", skip_serializing_if = "Option::is_none")]
    pub webhook_secret: Option<Box<models::IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodSecretKeySelector>>,
}

impl GithubPeriodComPeriodArgoprojPeriodArgoEventsPeriodPkgPeriodApisPeriodEventsPeriodV1alpha1PeriodBitbucketServerEventSource {
    pub fn new() -> GithubPeriodComPeriodArgoprojPeriodArgoEventsPeriodPkgPeriodApisPeriodEventsPeriodV1alpha1PeriodBitbucketServerEventSource {
        GithubPeriodComPeriodArgoprojPeriodArgoEventsPeriodPkgPeriodApisPeriodEventsPeriodV1alpha1PeriodBitbucketServerEventSource {
            access_token: None,
            bitbucketserver_base_url: None,
            check_interval: None,
            delete_hook_on_finish: None,
            events: None,
            filter: None,
            metadata: None,
            one_event_per_change: None,
            project_key: None,
            projects: None,
            repositories: None,
            repository_slug: None,
            skip_branch_refs_changed_on_open_pr: None,
            tls: None,
            webhook: None,
            webhook_secret: None,
        }
    }
}

