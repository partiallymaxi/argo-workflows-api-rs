/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IoArgoprojWorkflowV1alpha1Mutex : Mutex holds Mutex configuration
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoArgoprojWorkflowV1alpha1Mutex {
    /// Database specifies this is database controlled if this is set true
    #[serde(rename = "database", skip_serializing_if = "Option::is_none")]
    pub database: Option<bool>,
    /// name of the mutex
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace is the namespace of the mutex, default: [namespace of workflow]
    #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

impl IoArgoprojWorkflowV1alpha1Mutex {
    /// Mutex holds Mutex configuration
    pub fn new() -> IoArgoprojWorkflowV1alpha1Mutex {
        IoArgoprojWorkflowV1alpha1Mutex {
            database: None,
            name: None,
            namespace: None,
        }
    }
}

