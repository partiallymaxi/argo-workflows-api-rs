/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoArgoprojWorkflowV1alpha1SemaphoreStatus {
    /// Holding stores the list of resource acquired synchronization lock for workflows.
    #[serde(rename = "holding", skip_serializing_if = "Option::is_none")]
    pub holding: Option<Vec<models::IoArgoprojWorkflowV1alpha1SemaphoreHolding>>,
    /// Waiting indicates the list of current synchronization lock holders.
    #[serde(rename = "waiting", skip_serializing_if = "Option::is_none")]
    pub waiting: Option<Vec<models::IoArgoprojWorkflowV1alpha1SemaphoreHolding>>,
}

impl IoArgoprojWorkflowV1alpha1SemaphoreStatus {
    pub fn new() -> IoArgoprojWorkflowV1alpha1SemaphoreStatus {
        IoArgoprojWorkflowV1alpha1SemaphoreStatus {
            holding: None,
            waiting: None,
        }
    }
}

