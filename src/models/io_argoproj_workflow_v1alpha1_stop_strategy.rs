/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IoArgoprojWorkflowV1alpha1StopStrategy : StopStrategy defines if the CronWorkflow should stop scheduling based on an expression. v3.6 and after
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoArgoprojWorkflowV1alpha1StopStrategy {
    /// v3.6 and after: Expression is an expression that stops scheduling workflows when true. Use the variables `cronworkflow`.`failed` or `cronworkflow`.`succeeded` to access the number of failed or successful child workflows.
    #[serde(rename = "expression")]
    pub expression: String,
}

impl IoArgoprojWorkflowV1alpha1StopStrategy {
    /// StopStrategy defines if the CronWorkflow should stop scheduling based on an expression. v3.6 and after
    pub fn new(expression: String) -> IoArgoprojWorkflowV1alpha1StopStrategy {
        IoArgoprojWorkflowV1alpha1StopStrategy {
            expression,
        }
    }
}

