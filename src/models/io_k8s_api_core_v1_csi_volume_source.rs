/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IoK8sApiCoreV1CsiVolumeSource : Represents a source location of a volume to mount, managed by an external CSI driver
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoK8sApiCoreV1CsiVolumeSource {
    /// driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
    #[serde(rename = "driver")]
    pub driver: String,
    /// fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
    #[serde(rename = "fsType", skip_serializing_if = "Option::is_none")]
    pub fs_type: Option<String>,
    #[serde(rename = "nodePublishSecretRef", skip_serializing_if = "Option::is_none")]
    pub node_publish_secret_ref: Option<Box<models::IoK8sApiCoreV1LocalObjectReference>>,
    /// readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
    #[serde(rename = "readOnly", skip_serializing_if = "Option::is_none")]
    pub read_only: Option<bool>,
    /// volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
    #[serde(rename = "volumeAttributes", skip_serializing_if = "Option::is_none")]
    pub volume_attributes: Option<std::collections::HashMap<String, String>>,
}

impl IoK8sApiCoreV1CsiVolumeSource {
    /// Represents a source location of a volume to mount, managed by an external CSI driver
    pub fn new(driver: String) -> IoK8sApiCoreV1CsiVolumeSource {
        IoK8sApiCoreV1CsiVolumeSource {
            driver,
            fs_type: None,
            node_publish_secret_ref: None,
            read_only: None,
            volume_attributes: None,
        }
    }
}

