/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IoK8sApiCoreV1EnvFromSource : EnvFromSource represents the source of a set of ConfigMaps or Secrets
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoK8sApiCoreV1EnvFromSource {
    #[serde(rename = "configMapRef", skip_serializing_if = "Option::is_none")]
    pub config_map_ref: Option<Box<models::IoK8sApiCoreV1ConfigMapEnvSource>>,
    /// Optional text to prepend to the name of each environment variable. Must be a C_IDENTIFIER.
    #[serde(rename = "prefix", skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(rename = "secretRef", skip_serializing_if = "Option::is_none")]
    pub secret_ref: Option<Box<models::IoK8sApiCoreV1SecretEnvSource>>,
}

impl IoK8sApiCoreV1EnvFromSource {
    /// EnvFromSource represents the source of a set of ConfigMaps or Secrets
    pub fn new() -> IoK8sApiCoreV1EnvFromSource {
        IoK8sApiCoreV1EnvFromSource {
            config_map_ref: None,
            prefix: None,
            secret_ref: None,
        }
    }
}

