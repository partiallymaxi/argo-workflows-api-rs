/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IoK8sApiCoreV1HttpGetAction : HTTPGetAction describes an action based on HTTP Get requests.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoK8sApiCoreV1HttpGetAction {
    /// Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.
    #[serde(rename = "host", skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(rename = "httpHeaders", skip_serializing_if = "Option::is_none")]
    pub http_headers: Option<Vec<models::IoK8sApiCoreV1HttpHeader>>,
    /// Path to access on the HTTP server.
    #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(rename = "port")]
    pub port: String,
    /// Scheme to use for connecting to the host. Defaults to HTTP.
    #[serde(rename = "scheme", skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

impl IoK8sApiCoreV1HttpGetAction {
    /// HTTPGetAction describes an action based on HTTP Get requests.
    pub fn new(port: String) -> IoK8sApiCoreV1HttpGetAction {
        IoK8sApiCoreV1HttpGetAction {
            host: None,
            http_headers: None,
            path: None,
            port,
            scheme: None,
        }
    }
}

