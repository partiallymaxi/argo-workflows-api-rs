/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IoK8sApiCoreV1IscsiVolumeSource : Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoK8sApiCoreV1IscsiVolumeSource {
    /// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
    #[serde(rename = "chapAuthDiscovery", skip_serializing_if = "Option::is_none")]
    pub chap_auth_discovery: Option<bool>,
    /// chapAuthSession defines whether support iSCSI Session CHAP authentication
    #[serde(rename = "chapAuthSession", skip_serializing_if = "Option::is_none")]
    pub chap_auth_session: Option<bool>,
    /// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
    #[serde(rename = "fsType", skip_serializing_if = "Option::is_none")]
    pub fs_type: Option<String>,
    /// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
    #[serde(rename = "initiatorName", skip_serializing_if = "Option::is_none")]
    pub initiator_name: Option<String>,
    /// iqn is the target iSCSI Qualified Name.
    #[serde(rename = "iqn")]
    pub iqn: String,
    /// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
    #[serde(rename = "iscsiInterface", skip_serializing_if = "Option::is_none")]
    pub iscsi_interface: Option<String>,
    /// lun represents iSCSI Target Lun number.
    #[serde(rename = "lun")]
    pub lun: i32,
    /// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    #[serde(rename = "portals", skip_serializing_if = "Option::is_none")]
    pub portals: Option<Vec<String>>,
    /// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
    #[serde(rename = "readOnly", skip_serializing_if = "Option::is_none")]
    pub read_only: Option<bool>,
    #[serde(rename = "secretRef", skip_serializing_if = "Option::is_none")]
    pub secret_ref: Option<Box<models::IoK8sApiCoreV1LocalObjectReference>>,
    /// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    #[serde(rename = "targetPortal")]
    pub target_portal: String,
}

impl IoK8sApiCoreV1IscsiVolumeSource {
    /// Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
    pub fn new(iqn: String, lun: i32, target_portal: String) -> IoK8sApiCoreV1IscsiVolumeSource {
        IoK8sApiCoreV1IscsiVolumeSource {
            chap_auth_discovery: None,
            chap_auth_session: None,
            fs_type: None,
            initiator_name: None,
            iqn,
            iscsi_interface: None,
            lun,
            portals: None,
            read_only: None,
            secret_ref: None,
            target_portal,
        }
    }
}

