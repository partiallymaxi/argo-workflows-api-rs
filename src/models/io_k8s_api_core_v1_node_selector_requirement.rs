/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IoK8sApiCoreV1NodeSelectorRequirement : A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoK8sApiCoreV1NodeSelectorRequirement {
    /// The label key that the selector applies to.
    #[serde(rename = "key")]
    pub key: String,
    /// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    #[serde(rename = "operator")]
    pub operator: String,
    /// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    #[serde(rename = "values", skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

impl IoK8sApiCoreV1NodeSelectorRequirement {
    /// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    pub fn new(key: String, operator: String) -> IoK8sApiCoreV1NodeSelectorRequirement {
        IoK8sApiCoreV1NodeSelectorRequirement {
            key,
            operator,
            values: None,
        }
    }
}

