/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IoK8sApiCoreV1PersistentVolumeClaimTemplate : PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoK8sApiCoreV1PersistentVolumeClaimTemplate {
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Box<models::IoK8sApimachineryPkgApisMetaV1ObjectMeta>>,
    #[serde(rename = "spec")]
    pub spec: Box<models::IoK8sApiCoreV1PersistentVolumeClaimSpec>,
}

impl IoK8sApiCoreV1PersistentVolumeClaimTemplate {
    /// PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
    pub fn new(spec: models::IoK8sApiCoreV1PersistentVolumeClaimSpec) -> IoK8sApiCoreV1PersistentVolumeClaimTemplate {
        IoK8sApiCoreV1PersistentVolumeClaimTemplate {
            metadata: None,
            spec: Box::new(spec),
        }
    }
}

