/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodCronWorkflowStatus : CronWorkflowStatus is the status of a CronWorkflow
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodCronWorkflowStatus {
    /// Active is a list of active workflows stemming from this CronWorkflow
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<Vec<models::IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodObjectReference>>,
    /// Conditions is a list of conditions the CronWorkflow may have
    #[serde(rename = "conditions", skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodCondition>>,
    /// v3.6 and after: Failed counts how many times child workflows failed
    #[serde(rename = "failed", skip_serializing_if = "Option::is_none")]
    pub failed: Option<i32>,
    /// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    #[serde(rename = "lastScheduledTime", skip_serializing_if = "Option::is_none")]
    pub last_scheduled_time: Option<String>,
    /// v3.6 and after: Phase is an enum of Active or Stopped. It changes to Stopped when stopStrategy.expression is true
    #[serde(rename = "phase", skip_serializing_if = "Option::is_none")]
    pub phase: Option<String>,
    /// v3.6 and after: Succeeded counts how many times child workflows succeeded
    #[serde(rename = "succeeded", skip_serializing_if = "Option::is_none")]
    pub succeeded: Option<i32>,
}

impl IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodCronWorkflowStatus {
    /// CronWorkflowStatus is the status of a CronWorkflow
    pub fn new() -> IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodCronWorkflowStatus {
        IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodCronWorkflowStatus {
            active: None,
            conditions: None,
            failed: None,
            last_scheduled_time: None,
            phase: None,
            succeeded: None,
        }
    }
}

