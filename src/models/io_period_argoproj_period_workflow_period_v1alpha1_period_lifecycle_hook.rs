/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodLifecycleHook {
    #[serde(rename = "arguments", skip_serializing_if = "Option::is_none")]
    pub arguments: Option<Box<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodArguments>>,
    /// Expression is a condition expression for when a node will be retried. If it evaluates to false, the node will not be retried and the retry strategy will be ignored
    #[serde(rename = "expression", skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    /// Template is the name of the template to execute by the hook
    #[serde(rename = "template", skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(rename = "templateRef", skip_serializing_if = "Option::is_none")]
    pub template_ref: Option<Box<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodTemplateRef>>,
}

impl IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodLifecycleHook {
    pub fn new() -> IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodLifecycleHook {
        IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodLifecycleHook {
            arguments: None,
            expression: None,
            template: None,
            template_ref: None,
        }
    }
}

