/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodMemoizationStatus : MemoizationStatus is the status of this memoized node
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodMemoizationStatus {
    /// Cache is the name of the cache that was used
    #[serde(rename = "cacheName")]
    pub cache_name: String,
    /// Hit indicates whether this node was created from a cache entry
    #[serde(rename = "hit")]
    pub hit: bool,
    /// Key is the name of the key used for this node's cache
    #[serde(rename = "key")]
    pub key: String,
}

impl IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodMemoizationStatus {
    /// MemoizationStatus is the status of this memoized node
    pub fn new(cache_name: String, hit: bool, key: String) -> IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodMemoizationStatus {
        IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodMemoizationStatus {
            cache_name,
            hit,
            key,
        }
    }
}

