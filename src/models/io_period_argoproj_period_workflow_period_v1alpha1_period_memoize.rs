/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodMemoize : Memoization enables caching for the Outputs of the template
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodMemoize {
    #[serde(rename = "cache")]
    pub cache: Box<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodCache>,
    /// Key is the key to use as the caching key
    #[serde(rename = "key")]
    pub key: String,
    /// MaxAge is the maximum age (e.g. \"180s\", \"24h\") of an entry that is still considered valid. If an entry is older than the MaxAge, it will be ignored.
    #[serde(rename = "maxAge")]
    pub max_age: String,
}

impl IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodMemoize {
    /// Memoization enables caching for the Outputs of the template
    pub fn new(cache: models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodCache, key: String, max_age: String) -> IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodMemoize {
        IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodMemoize {
            cache: Box::new(cache),
            key,
            max_age,
        }
    }
}

