/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodNodeFlag {
    /// Hooked tracks whether or not this node was triggered by hook or onExit
    #[serde(rename = "hooked", skip_serializing_if = "Option::is_none")]
    pub hooked: Option<bool>,
    /// Retried tracks whether or not this node was retried by retryStrategy
    #[serde(rename = "retried", skip_serializing_if = "Option::is_none")]
    pub retried: Option<bool>,
}

impl IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodNodeFlag {
    pub fn new() -> IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodNodeFlag {
        IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodNodeFlag {
            hooked: None,
            retried: None,
        }
    }
}

