/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodOAuth2Auth : OAuth2Auth holds all information for client authentication via OAuth2 tokens
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodOAuth2Auth {
    #[serde(rename = "clientIDSecret", skip_serializing_if = "Option::is_none")]
    pub client_id_secret: Option<Box<models::IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodSecretKeySelector>>,
    #[serde(rename = "clientSecretSecret", skip_serializing_if = "Option::is_none")]
    pub client_secret_secret: Option<Box<models::IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodSecretKeySelector>>,
    #[serde(rename = "endpointParams", skip_serializing_if = "Option::is_none")]
    pub endpoint_params: Option<Vec<models::IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodOAuth2EndpointParam>>,
    #[serde(rename = "scopes", skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    #[serde(rename = "tokenURLSecret", skip_serializing_if = "Option::is_none")]
    pub token_url_secret: Option<Box<models::IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodSecretKeySelector>>,
}

impl IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodOAuth2Auth {
    /// OAuth2Auth holds all information for client authentication via OAuth2 tokens
    pub fn new() -> IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodOAuth2Auth {
        IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodOAuth2Auth {
            client_id_secret: None,
            client_secret_secret: None,
            endpoint_params: None,
            scopes: None,
            token_url_secret: None,
        }
    }
}

