/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodOssLifecycleRule : OSSLifecycleRule specifies how to manage bucket's lifecycle
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodOssLifecycleRule {
    /// MarkDeletionAfterDays is the number of days before we delete objects in the bucket
    #[serde(rename = "markDeletionAfterDays", skip_serializing_if = "Option::is_none")]
    pub mark_deletion_after_days: Option<i32>,
    /// MarkInfrequentAccessAfterDays is the number of days before we convert the objects in the bucket to Infrequent Access (IA) storage type
    #[serde(rename = "markInfrequentAccessAfterDays", skip_serializing_if = "Option::is_none")]
    pub mark_infrequent_access_after_days: Option<i32>,
}

impl IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodOssLifecycleRule {
    /// OSSLifecycleRule specifies how to manage bucket's lifecycle
    pub fn new() -> IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodOssLifecycleRule {
        IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodOssLifecycleRule {
            mark_deletion_after_days: None,
            mark_infrequent_access_after_days: None,
        }
    }
}

