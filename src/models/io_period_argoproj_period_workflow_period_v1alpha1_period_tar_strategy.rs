/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodTarStrategy : TarStrategy will tar and gzip the file or directory when saving
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodTarStrategy {
    /// CompressionLevel specifies the gzip compression level to use for the artifact. Defaults to gzip.DefaultCompression.
    #[serde(rename = "compressionLevel", skip_serializing_if = "Option::is_none")]
    pub compression_level: Option<i32>,
}

impl IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodTarStrategy {
    /// TarStrategy will tar and gzip the file or directory when saving
    pub fn new() -> IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodTarStrategy {
        IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodTarStrategy {
            compression_level: None,
        }
    }
}

