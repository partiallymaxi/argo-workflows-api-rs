/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodTemplateRef : TemplateRef is a reference of template resource.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodTemplateRef {
    /// ClusterScope indicates the referred template is cluster scoped (i.e. a ClusterWorkflowTemplate).
    #[serde(rename = "clusterScope", skip_serializing_if = "Option::is_none")]
    pub cluster_scope: Option<bool>,
    /// Name is the resource name of the template.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Template is the name of referred template in the resource.
    #[serde(rename = "template", skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
}

impl IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodTemplateRef {
    /// TemplateRef is a reference of template resource.
    pub fn new() -> IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodTemplateRef {
        IoPeriodArgoprojPeriodWorkflowPeriodV1alpha1PeriodTemplateRef {
            cluster_scope: None,
            name: None,
            template: None,
        }
    }
}

