/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodContainerResizePolicy : ContainerResizePolicy represents resource resize policy for the container.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodContainerResizePolicy {
    /// Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
    #[serde(rename = "resourceName")]
    pub resource_name: String,
    /// Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
    #[serde(rename = "restartPolicy")]
    pub restart_policy: String,
}

impl IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodContainerResizePolicy {
    /// ContainerResizePolicy represents resource resize policy for the container.
    pub fn new(resource_name: String, restart_policy: String) -> IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodContainerResizePolicy {
        IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodContainerResizePolicy {
            resource_name,
            restart_policy,
        }
    }
}

