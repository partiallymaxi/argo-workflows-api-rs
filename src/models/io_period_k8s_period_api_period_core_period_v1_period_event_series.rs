/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodEventSeries : EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodEventSeries {
    /// Number of occurrences in this series up to the last heartbeat time
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    /// MicroTime is version of Time with microsecond level precision.
    #[serde(rename = "lastObservedTime", skip_serializing_if = "Option::is_none")]
    pub last_observed_time: Option<String>,
}

impl IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodEventSeries {
    /// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
    pub fn new() -> IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodEventSeries {
        IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodEventSeries {
            count: None,
            last_observed_time: None,
        }
    }
}

