/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodGrpcAction : GRPCAction specifies an action involving a GRPC service.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodGrpcAction {
    /// Port number of the gRPC service. Number must be in the range 1 to 65535.
    #[serde(rename = "port")]
    pub port: i32,
    /// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).  If this is not specified, the default behavior is defined by gRPC.
    #[serde(rename = "service", skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

impl IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodGrpcAction {
    /// GRPCAction specifies an action involving a GRPC service.
    pub fn new(port: i32) -> IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodGrpcAction {
        IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodGrpcAction {
            port,
            service: None,
        }
    }
}

