/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodPhotonPersistentDiskVolumeSource : Represents a Photon Controller persistent disk resource.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodPhotonPersistentDiskVolumeSource {
    /// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
    #[serde(rename = "fsType", skip_serializing_if = "Option::is_none")]
    pub fs_type: Option<String>,
    /// pdID is the ID that identifies Photon Controller persistent disk
    #[serde(rename = "pdID")]
    pub pd_id: String,
}

impl IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodPhotonPersistentDiskVolumeSource {
    /// Represents a Photon Controller persistent disk resource.
    pub fn new(pd_id: String) -> IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodPhotonPersistentDiskVolumeSource {
        IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodPhotonPersistentDiskVolumeSource {
            fs_type: None,
            pd_id,
        }
    }
}

