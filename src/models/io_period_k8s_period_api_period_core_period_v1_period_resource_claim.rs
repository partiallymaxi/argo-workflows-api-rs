/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodResourceClaim : ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodResourceClaim {
    /// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    #[serde(rename = "name")]
    pub name: String,
    /// Request is the name chosen for a request in the referenced claim. If empty, everything from the claim is made available, otherwise only the result of this request.
    #[serde(rename = "request", skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
}

impl IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodResourceClaim {
    /// ResourceClaim references one entry in PodSpec.ResourceClaims.
    pub fn new(name: String) -> IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodResourceClaim {
        IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodResourceClaim {
            name,
            request: None,
        }
    }
}

