/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IoPeriodK8sPeriodApiPeriodPolicyPeriodV1PeriodPodDisruptionBudgetSpec : PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoPeriodK8sPeriodApiPeriodPolicyPeriodV1PeriodPodDisruptionBudgetSpec {
    #[serde(rename = "maxUnavailable", skip_serializing_if = "Option::is_none")]
    pub max_unavailable: Option<String>,
    #[serde(rename = "minAvailable", skip_serializing_if = "Option::is_none")]
    pub min_available: Option<String>,
    #[serde(rename = "selector", skip_serializing_if = "Option::is_none")]
    pub selector: Option<Box<models::IoPeriodK8sPeriodApimachineryPeriodPkgPeriodApisPeriodMetaPeriodV1PeriodLabelSelector>>,
    /// UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods should be considered for eviction. Current implementation considers healthy pods, as pods that have status.conditions item with type=\"Ready\",status=\"True\".  Valid policies are IfHealthyBudget and AlwaysAllow. If no policy is specified, the default behavior will be used, which corresponds to the IfHealthyBudget policy.  IfHealthyBudget policy means that running pods (status.phase=\"Running\"), but not yet healthy can be evicted only if the guarded application is not disrupted (status.currentHealthy is at least equal to status.desiredHealthy). Healthy pods will be subject to the PDB for eviction.  AlwaysAllow policy means that all running pods (status.phase=\"Running\"), but not yet healthy are considered disrupted and can be evicted regardless of whether the criteria in a PDB is met. This means perspective running pods of a disrupted application might not get a chance to become healthy. Healthy pods will be subject to the PDB for eviction.  Additional policies may be added in the future. Clients making eviction decisions should disallow eviction of unhealthy pods if they encounter an unrecognized policy in this field.
    #[serde(rename = "unhealthyPodEvictionPolicy", skip_serializing_if = "Option::is_none")]
    pub unhealthy_pod_eviction_policy: Option<String>,
}

impl IoPeriodK8sPeriodApiPeriodPolicyPeriodV1PeriodPodDisruptionBudgetSpec {
    /// PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
    pub fn new() -> IoPeriodK8sPeriodApiPeriodPolicyPeriodV1PeriodPodDisruptionBudgetSpec {
        IoPeriodK8sPeriodApiPeriodPolicyPeriodV1PeriodPodDisruptionBudgetSpec {
            max_unavailable: None,
            min_available: None,
            selector: None,
            unhealthy_pod_eviction_policy: None,
        }
    }
}

